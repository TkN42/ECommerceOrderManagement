@page "/login"
@using System.ComponentModel.DataAnnotations
@using BusinessLogic.Services
@rendermode InteractiveAuto
@inject NavigationManager Navigation
@inject BusinessLogic.Services.AuthService AuthService

<h3 style="text-align: center;">Login Sayfası</h3>

<div class="login-form-container">
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" OnInvalidSubmit="HandleInvalidSubmit" FormName="loginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxTextBox @bind-Text="@loginModel.KullaniciAdi" NullText="Kullanıcı Adı" CssClass="form-input" />
        <DxTextBox @bind-Text="@loginModel.Parola" NullText="Parola" Password="true" CssClass="form-input" />
        <DxButton SubmitFormOnClick="true"
                  Text="Giriş Yap"
                  CssClass="form-button"
                  RenderStyle="ButtonRenderStyle.Secondary"
                  FormName="loginForm" />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p style="color: red; font-weight: bold; text-align: center;">@errorMessage</p>
        }
    </EditForm>

    <p style="text-align: center; margin-top: 10px;">
        Henüz bir hesabınız yok mu? <a href="/register" class="register-link">Kayıt Ol</a>
    </p>
</div>

@code {
    [Inject]
    private Blazored.SessionStorage.ISessionStorageService SessionStorage { get; set; }
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        var isValidUser = await AuthService.AuthenticateAsync(loginModel.KullaniciAdi, loginModel.Parola);
        if (isValidUser)
        {
            await SessionStorage.SetItemAsync("KullaniciAdi", loginModel.KullaniciAdi);
            Navigation.NavigateTo("/dashboard", forceLoad: true);
        }
        else
        {
            errorMessage = "Kullanıcı adı veya parola hatalı.";
        }
    }

    private async Task HandleInvalidSubmit()
    {
        errorMessage = "Hata!";
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Kullanıcı adı gereklidir.")]
        public string KullaniciAdi { get; set; }

        [Required(ErrorMessage = "Parola gereklidir.")]
        public string Parola { get; set; }
    }
}

<style>
    .login-form-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-input {
        width: 100%;
        margin-bottom: 15px;
        padding: 8px;
        font-size: 14px;
        border-radius: 4px;
        border: 1px solid #ccc;
        box-sizing: border-box;
    }

    .form-button {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
    }

        .form-button:hover {
            background-color: #0056b3;
        }

    h3 {
        margin-bottom: 20px;
    }

    .login-form-container p {
        text-align: center;
    }

    .register-link {
        color: #007bff;
        text-decoration: none;
        font-weight: bold;
    }

        .register-link:hover {
            text-decoration: underline;
        }

    .dxbl-drawer-panel, .button-link {
        display: none !important;
    }
</style>
