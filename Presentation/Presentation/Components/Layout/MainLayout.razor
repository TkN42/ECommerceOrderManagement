@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider *@

@* <CascadingAuthenticationState>
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            <AuthorizeView>
                <Authorized>
                    <p>Giriş Yapıldı!</p>
                </Authorized>
                <NotAuthorized>
                    <p>Lütfen giriş yapın.</p>
                </NotAuthorized>
            </AuthorizeView>

            <div class="content">
                @Body
            </div>
        </div>
    </div>
</CascadingAuthenticationState> *@

<div class="page">
    <Drawer DrawerHeader="drawerHeader" DrawerFooter="drawerFooter">
        <DrawerBody>
            <div class="w-100">

                <NavMenu></NavMenu> 

            </div>
        </DrawerBody>
        <DrawerTarget>
            <div class="nav-buttons-container">
                <NavLink href="@UrlGenerator.GetUrl(new Uri(NavigationManager.Uri).LocalPath, !ToggledSidebar)">
                    <DxButton RenderStyle="@ButtonRenderStyle.Secondary" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button" IconCssClass="icon icon-menu"></DxButton>
                </NavLink>
                @if (new Uri(NavigationManager.Uri).LocalPath != "/")
                {
                    <NavLink href="@UrlGenerator.GetUrl("/", ToggledSidebar)" class="button-link hidden">
                        <DxButton RenderStyle="@ButtonRenderStyle.Dark" Text="Back to Home" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button-nav" IconCssClass="icon icon-back"></DxButton>
                    </NavLink>
                }

            </div>
            <div class="p-4">
                @Body
            </div>
        </DrawerTarget>
    </Drawer>
</div>

@code {
    private bool isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
    }

    private async Task Logout()
    {
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        await SessionStorage.RemoveItemAsync("KullaniciAdi");
        isLoggedIn = false;
        StateHasChanged();
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

    // private bool isFirstRender = true;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await CheckLoginStatus();
    //         isFirstRender = false;
    //         StateHasChanged();
    //     }
    // }

    // private async Task CheckLoginStatus()
    // {
    //     var userName = await SessionStorage.GetItemAsync<string>("KullaniciAdi");
    //     isLoggedIn = !string.IsNullOrEmpty(userName);
    //     await InvokeAsync(StateHasChanged); // UI'nın güncellendiğinden emin ol
    // }

    // protected override async Task OnInitializedAsync()
    // {
    //     var userName = await SessionStorage.GetItemAsync<string>("KullaniciAdi");
    //     isLoggedIn = !string.IsNullOrEmpty(userName);
    // }

    // private async Task Logout()
    // {
    //     await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     NavigationManager.NavigateTo("/logout", forceLoad: true);
    // }

    // private void Login()
    // {
    //     NavigationManager.NavigateTo("/login");
    // }

    [SupplyParameterFromQuery(Name = UrlGenerator.ToggleSidebarName)]
    public bool ToggledSidebar { get; set; }

    private RenderFragment drawerHeader => @<div class="navigation-drawer-header">
        <img class="logo" src="images/logo.svg" alt="DevExpress logo" />
        <NavLink href="@UrlGenerator.GetUrl(new Uri(NavigationManager.Uri).LocalPath, !ToggledSidebar)">
            <DxButton RenderStyle="@ButtonRenderStyle.Light" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button-nav" IconCssClass="@(ToggledSidebar ? "icon icon-close" : "icon icon-menu")"></DxButton>
        </NavLink>
    </div>;

    private RenderFragment drawerFooter => @<div>
        <NavLink href="https://docs.devexpress.com/Blazor/400725/blazor-components" class="button-link">
            <DxButton Text="Docs" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="footer-button" RenderStyle="@ButtonRenderStyle.Light" IconCssClass="icon docs-icon"></DxButton>
        </NavLink>
        <NavLink href="https://demos.devexpress.com/blazor/" class="button-link">
            <DxButton Text="Demos" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="footer-button" RenderStyle="@ButtonRenderStyle.Light" IconCssClass="icon demos-icon"></DxButton>
        </NavLink>
    </div>;


}